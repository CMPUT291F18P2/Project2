from bsddb3 import db
import filecreator
import indexing
import operator
import re

''' Initializing Berkeley databases
    Creates databases for the index files generated by indexing.py
'''
def getCursor(type):

	adsCurs = 0
	termsCurs = 1
	pdateCurs = 2
	pricesCurs = 3

	database = db.DB()
	database.set_flags(db.DB_DUP)

	# Database for ads
	if type == adsCurs:
		adsFile = "ad.idx"
		adsDatabase.open(adsFile, None, db.DB_HASH, db.DB_CREATE)

	# Database for terms
	elif type == termsCurs:
		termsFile = "te.idx"
		database.open(termsFile, None, db.DB_BTREE, db.DB_CREATE)

	# Database for pdates
	elif type == pdateCurs:
		pdatesFile = "da.idx"
		database.open(pdatesFile, None, db.DB_BTREE, db.DB_CREATE)

	# Database for prices
	elif type == pricesCurs:
		pricesFile = "pr.idx"
		database.open(pricesFile, None, db.DB_BTREE, db.DB_CREATE)

	return database, database.cursor()

def grammar():
	alphanumeric = "[0-9a-zA-Z_-]"
	numeric = "[0-9]"
	date = "[0-9]{4}/[0-9]{2}/[0-9]{2}"
	datePrefix = "date[\\s]*(?:=|>|<|>=|<=)"
	dateQuery = "{}[\\s]*{}".format(datePrefix, date)
	price = "{}+".format(numeric)
	pricePrefix = "price[\\s]*(?:=|>|<|>=|<=)"
	priceQuery = "{}[\\s]*{}".format(pricePrefix, price)
	location = "{}+".format(alphanumeric)
	locationPrefix = "location[\\s]*="
	locationQuery = "{}[\\s]*{}".format(locationPrefix, location)
	cat = "{}+".format(alphanumeric)
	catPrefix = "cat[\\s]*="
	catQuery = "{}[\\s]*{}".format(catPrefix, cat)
	term = "{}+".format(alphanumeric)
	termSuffix = "%"
	termQuery = "{0}{1}|{0}".format(term, termSuffix)
	expression = "{}|{}|{}|{}|{}".format(dateQuery, priceQuery, locationQuery, catQuery, termQuery)
	query = "\\A({0})(?:[\\s]({0}))*\\Z".format(expression)

''' Preparing files for Berkeley DB usage
    From a record input, this function generates .txt files for ads, terms, pdates, and prices
    These .txt files are then indexed into .idx files
'''
def prepFile():
	filecreator.main()
	indexing.main()

def queryBreakdown(query):
	phrases = re.findall(r"\w+", query)
	operators = re.findall(r">=|<=|=|<|>", query)

def priceCheck(op,num):
	db,curs = getCursor(3)
	if op == ">":
		result = curs.set_range(num.encode("utf-8"))
		result = curs.next()
	elif op == ">=":
		result = curs.set_range(num.encode("utf-8"))
	elif op == "<":
		result = curs.set_range(max = num.encode("utf-8"))
		result = curs.next()
	elif op == "<=":
		result = curs.set_range(max = num.encode("utf-8"))
	while(result != None):
		id = result[1].decode("utf-8")
		result = curs.next()
	return id

def dateCheck(op,date):
	db,curs = getCursor(2)
	if op == ">":
		result = curs.set_range(num.encode("utf-8"))
		result = curs.next()
	elif op == ">=":
		result = curs.set_range(num.encode("utf-8"))
	elif op == "<":
		result = curs.set_range(max = num.encode("utf-8"))
	elif op == "<=":
		result = curs.set_range(max = num.encode("uft-8"))
	while(result != None):
		id = result[1].decode("utf-8")
		result = curs.next()
	return id

def termCheck(term):
	return 0

def main():
	prepFile()
	outputFormat = "full"

	print("Welcome to Kijiji\n")
	print('Type "help" for list of available commands\n')
	while(True):
		userInput = input("What would you like to do? ").lower()
		if (userInput == "help"):
			print("Enter query, change format, quit\n")

		elif (userInput == "enter query"):
			queryBreakdown(input("Query: "))

		elif (userInput == "change format"):
			outputFormat = input("(full/brief): output=").lower()
			print("Format has been changed to %s\n" % outputFormat)

		elif (userInput == "quit"):
			break



if __name__ == "__main__":
	main()
