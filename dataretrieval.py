from bsddb3 import db
import filecreator
import indexing
import operator
import re

''' Initializing Berkeley databases
    Creates databases for the index files generated by indexing.py
'''
def getCursor(type):

	adsCurs = 0
	termsCurs = 1
	pdateCurs = 2
	pricesCurs = 4

	database = db.DB()
	database.set_flags(db.DB_DUP)

	# Database for ads
	if type == adsCurs:
		adsFile = "ad.idx"
		adsDatabase.open(adsFile, None, db.DB_HASH, db.DB_CREATE)

	# Database for terms
	elif type == termsCurs:
		termsFile = "te.idx"
		database.open(termsFile, None, db.DB_BTREE, db.DB_CREATE)

	# Database for pdates
	elif type == pdateCurs:
		pdatesFile = "da.idx"
		database.open(pdatesFile, None, db.DB_BTREE, db.DB_CREATE)

	# Database for prices
	elif type == pricesCurs:
		pricesFile = "pr.idx"
		database.open(pricesFile, None, db.DB_BTREE, db.DB_CREATE)

	return database, database.cursor()

''' Preparing files for Berkeley DB usage
    From a record input, this function generates .txt files for ads, terms, pdates, and prices
    These .txt files are then indexed into .idx files
'''
def prepFile():
	filecreator.main()
	indexing.main()

def queryBreakdown(query):
    commands = {date:dateCheck,price:priceCheck,location:locationCheck,cat:catagoryCheck}
    phrases = re.findall(r"\w+", query)
    operators = re.findall(r">=|<=|=|<|>", query)
    for stuff in len(splitquery):
        if splitquery[stuff] in commands:
            stuff1 = splitquery[stuff+1]
            stuff1 = splitquery[stuff+2]
            commands[splitquery[stuff]](stuff1,stuff2)
        else:
            termsCheck(splitquery[stuff])

def priceCheck(op,num):
    db,curs = getCursor(4)
    if op == ">":
        result = curs.set_range(num.encode("utf-8"))
        result = curs.next()
    elif op == ">=":
        result = curs.set_range(num.encode("utf-8"))
    elif op == "<":
        result = curs.set_range(max = num.encode("utf-8"))
        result = curs.next()
    elif op == "<=":
        result = curs.set_range(max = num.encode("utf-8"))
    while(result != None):
        id = result[1].decode("utf-8")
        result = curs.next()
    return id

def main():
    prepFile()

    outputFormat = "full"

    print("Welcome to Kijiji\n")
    print('Type "help" for list of available commands\n')
    while(True):
        userInput = input("What would you like to do? ").lower()
        if (userInput == "help"):
	        print("Enter query, change format, quit\n")

        elif (userInput == "enter query"):
            queryBreakdown(input("Query: "))

        elif (userInput == "change format"):
            outputFormat = input("(full/brief): output=").lower()
            print("Format has been changed to %s\n" % outputFormat)

        elif (userInput == "quit"):
            break



if __name__ == "__main__":
	main()
